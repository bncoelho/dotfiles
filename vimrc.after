syntax enable
set background=dark
colorscheme solarized

let g:solarized_termtrans = 1
let g:solarized_termcolors = 16

set nocompatible
set t_Co=16

let g:Powerline_symbols = 'fancy'
let g:Powerline_theme ='default'
let g:Powerline_colorscheme = 'solarized16'
set guifont=Monaco-Powerline
set encoding=utf-8

let mapleader = ","

"highlight OverLength ctermbg=red ctermfg=white guibg=#592929"
"match OverLength /\%100v.\+/"

" Highlight long lines {{{
function HighlightLongLines()
  let w:highlight_long_lines
        \ = exists('w:highlight_long_lines') ?
        \ ! w:highlight_long_lines : 1
  if w:highlight_long_lines
    let w:m1=matchadd('Search', '\%<97v.\%>93v', -1)
    let w:m2=matchadd('ErrorMsg', '\%>96v.\+', -1)
  else
    call matchdelete(w:m1)
    call matchdelete(w:m2)
  endif
endfunction
" Enable it by default in all windows
"au BufWinEnter * call HighlightLongLines()
" Map it to <F3>
nnoremap <silent> <F3> :call HighlightLongLines()<CR>
"}}}


set tags+=gems.tags
set tags+=./tags
map º [
map ´ ]


let g:ctrlp_extensions = ['tag']

nnoremap <silent>π :CtrlPTag<CR> 
nnoremap <silent><C-p> :CtrlP .<CR> 

set autoread

filetype plugin indent on
let g:NERDTreeWinSize = 30

hi IndentGuidesOdd  ctermbg=black
hi IndentGuidesEven ctermbg=darkgrey

nnoremap <silent> <F4> :IndentGuidesToggle<CR>
nnoremap <silent> <F5> :GitGutterToggle<CR>
nnoremap <silent> <F7> :RainbowParenthesesToggle<CR>

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" The Silver Searcher
if executable('ag')
  "Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K :Ag "\b<C-R><C-W>\b"<CR>:cw<CR>

" Map Ctrl+Shift+f to :Ack Command 
nnoremap <C-F> :Ag 

" Gif config
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

let g:tagbar_type_scala = {
    \ 'ctagstype' : 'Scala',
    \ 'kinds'     : [
        \ 'p:packages:1',
        \ 'V:values',
        \ 'v:variables',
        \ 'T:types',
        \ 't:traits',
        \ 'o:objects',
        \ 'a:aclasses',
        \ 'c:classes',
        \ 'r:cclasses',
        \ 'm:methods'
    \ ]
\ }

